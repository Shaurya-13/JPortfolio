const decode=require("urldecode"),utils=require("./utils"),handleSchemaRequest=(e,t)=>{if(-1==["get","post"].indexOf(e.method))throw new Error("Invalid HTTP method: "+e.method);const r=[];return Object.keys(t).forEach(e=>{const o=new(0,t[e]);r.push({name:e,collectionName:o.collectionName(),schema:o.schema()})}),r},handleCollectionRequest=(e,t)=>new Promise((r,o)=>{if(-1==["get","post"].indexOf(e.method))return void o(new Error("Invalid HTTP method: "+e.method));const n=t[e.resource];if(null==n)return void o(new Error("invalid resource: "+e.resource));const d=new n;if("get"==e.method){const t=e.event.queryStringParameters||{};d.get(t).then(e=>{r(e)}).catch(e=>{o(e)})}else if("post"==e.method){const t=utils.parseBody(e.event);if(null==t)return void o(new Error("Missing request body."));d.post(t).then(e=>{r(e)}).catch(e=>{o(e)})}else o(new Error("invalid HTTP method: "+e.method))}),handleRecordRequest=(e,t)=>{const r=["get","put","delete"];return new Promise((o,n)=>{if(-1==r.indexOf(e.method))return void n(new Error("Invalid HTTP method: "+e.method));const d=t[e.resource];if(null==d)return void n(new Error("invalid resource: "+e.resource));const i=new d;if("get"==e.method&&i.getById(e.id).then(e=>{o(e)}).catch(e=>{n(e)}),"put"==e.method){const t=utils.parseBody(e.event);if(null==t)return void n(new Error("Missing request body"));i.put(e.id,t).then(e=>{o(e)}).catch(e=>{n(e)})}if("delete"==e.method){const t=e.id;i.delete(t).then(e=>{o({id:t})}).catch(e=>{n(e)})}})};module.exports=((e,t,r)=>new Promise((t,o)=>{if("schema"!=r.type)"collection"!=r.type?"record"!=r.type?o(new Error("Invalid Request")):handleRecordRequest(r,e).then(e=>{t(e)}).catch(e=>{o(e)}):handleCollectionRequest(r,e).then(e=>{t(e)}).catch(e=>{o(e)});else try{const n=handleSchemaRequest(r,e);return void t(n)}catch(e){return void o(e)}}));