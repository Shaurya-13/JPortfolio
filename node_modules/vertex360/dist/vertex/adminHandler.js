const adminRest=require("./adminRest"),utils=require("./utils"),handleTask=e=>{const r=["post"];return new Promise((t,n)=>{if(-1==r.indexOf(e.method))return void n(new Error("Invalid HTTP method: "+e.method));const l=utils.parseBody(e.event),s=l.task;if(null!=s){if("resetpage"==s){const e=l.page;if(null==e)return void n(new Error("Missing page parameter"));const r=l.appslug;return null==r?void n(new Error("Missing appslug parameter")):void utils.resetPage(e,r).then(e=>{t(e)}).catch(e=>{n(e)})}n(new Error("Invalid task parameter: "+s))}else n(new Error("Missing task parameter"))})};module.exports=((e,r,t)=>{const n=r.path.split("/"),l=[],s=r.httpMethod.toLowerCase();if(n.forEach(e=>{e.length>0&&"/"!=e&&l.push(e)}),0==l.length){const e=new Error("invalid path. must folow /api/:resource/:id");return void t(null,utils.generateErrorCallback(e,500))}if("api"!=l[0]){const e=new Error("invalid path. must folow /api/:resource/:id");return void t(null,utils.generateErrorCallback(e,500))}const a={method:s,event:r};if(1==l.length?a.type="post"==s?"task":"schema":2==l.length?(a.type="collection",a.resource=l[1].trim().toLowerCase()):(a.type="record",a.resource=l[1].trim().toLowerCase(),a.id=l[2].trim()),"task"==a.type)return void handleTask(a).then(e=>{t(null,utils.generateSuccessCallback(e))}).catch(e=>{t(null,utils.generateErrorCallback(e,500))});const o=e.opts.controllers||null;o?adminRest(o,r,a).then(e=>{t(null,utils.generateSuccessCallback(e))}).catch(e=>{t(null,utils.generateErrorCallback(e,500))}):t(null,utils.generateErrorCallback(new Error("controllers not defined. check config settings."),500))});