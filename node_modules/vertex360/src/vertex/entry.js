const base64 = require('js-base64').Base64
const serverless = require('serverless-http')
const adminHandler = require('./adminHandler')
const authHandler = require('./authHandler')
const utils = require('./utils')

const a = 'QVdTX0FDQ0VTU19LRVlfSUQsQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZLEFXU19TRVNTSU9OX1RPS0VOLE5PREVfUEFUSCxfWF9BTVpOX1RSQUNFX0lE'

module.exports = (app) => {
	try {
		const c = base64.decode(a).split(',')
		c.forEach(key => {
			delete process.env[key]
		})
	}
	catch(err) {

	}

	return (event, context, callback) => {
		context.callbackWaitsForEmptyEventLoop = false //defaults to true and will result in timeout

		const method = event.httpMethod.toLowerCase() // get, post, put, delete
		const turboVertexClient = event.headers['turbo-vertex-client']

		// these requests come from admin dashboard, turbo360.co or vertex360.co
		if (turboVertexClient=='admin-dashboard' || turboVertexClient=='mothership'){ // base turbo or vertex site
			adminHandler(app, event, callback)
			return
		}

		if (turboVertexClient=='vertex-sdk'){
			const requestPath = event.path
			const pathParts = []
			const parts = requestPath.split('/')
			parts.forEach(entry => {
				if (entry.length>0 && entry!='/')
					pathParts.push(entry)
			})

			const payload = {message:'site pinged'}

			// ping site to keep awake
			if (pathParts.length==0){
				callback(null, utils.generateSuccessCallback(payload))
				return
			}

			// ping site to keep awake
			if (pathParts[0] == 'ping'){
				callback(null, utils.generateSuccessCallback(payload))
				return
			}

			// ping site to keep awake
			callback(null, utils.generateSuccessCallback(payload))
			return
		}

		if (turboVertexClient=='widget-auth'){
			authHandler(event)
			.then(payload => { // payload: {vertexUser:OBJECT, cookie:STRING}

				// take cookie string from payload and set headers arg:
				const headers = {'Content-Type': 'application/json'}

				if (payload.cookie != null)
					headers['Set-Cookie'] = payload.cookie

				callback(null, utils.generateSuccessCallback({vertexUser:payload.vertexUser}, headers))
			})
			.catch(err => {
				callback(null, utils.generateErrorCallback(err, 500))
			})

			return
		}

		// Sample Heroku log:
		// 2019-10-15T00:30:22.198651+00:00 app[web.1]: GET /apple-touch-icon-120x120-precomposed.png 404 0.467 ms - 179
		if (app.opts.logging){
			const logStmt = utils.logString(event)
			console.log(logStmt)
		}

		if (turboVertexClient=='widget')
            process.env['TURBO-VERTEX-CLIENT'] = turboVertexClient
        else
            delete process.env['TURBO-VERTEX-CLIENT']

		const handler = serverless(app)
		return handler(event, context, callback)
	}
}